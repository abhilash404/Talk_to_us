//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tickets")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub ticket_id: i32,
    pub user_id: i32,
    pub agent_id: Option<i32>,
    pub status: String,
    pub priority: Option<String>,
    pub topic: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::images::Entity")]
    Images,
    #[sea_orm(has_many = "super::ticket_history::Entity")]
    TicketHistory,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AgentId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users2,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users1,
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}

impl Related<super::ticket_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TicketHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
