//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "agents")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub agent_id: i32,
    pub profile_picture: Option<String>,
    pub dob: Option<Date>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::agent_tags::Entity")]
    AgentTags,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::AgentId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::agent_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AgentTags.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::agent_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::agent_tags::Relation::Agents.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
